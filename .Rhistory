dpois(rpois(10,2))
dpois(rpois(10,2),2)
plot(dpois(rpois(10,2),2))
plot(qpois(rpois(10,2),2))
rpois(10,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
plot y
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time()
message("test")
print
printf
print("test")
a <- matrix
?matix
?matrix
matrix(c(1,2,3,4),nrow=1,ncol=2)
matrix(c(1,2,3,4),nrow=1,ncol=4)
matrix(c(1,2,3,4),nrow=2,ncol=4)
matrix(c(1,2,3,4),nrow=2,ncol=2)
matrix(c(1,2,3,4),nrow=2,ncol=2)
matrix(c(1,2,3,4),nrow=2,ncol=2,byrow = TRUE)
m = matrix(c(1,2,3,4),nrow=2,ncol=2)
m
solve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
m
makeCacheMatrix(m)
cacheSolve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
debugSource('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
makeCacheMatrix(m)
cacheSolve(m)
x$getinv
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
x$getinv
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
n <- cacheSolve(m)
n <- makeCacheMatrix(m)
n
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
n <- makeCacheMatrix(matrix(c(3,4,5,6,6,5),nrow=3,ncol=3))
cacheSolve(n)
n <- makeCacheMatrix(matrix(c(3,4,5,6),nrow=2,ncol=2))
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
download.file()?
;
?download
?download.file()
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
setwd("/Users/jax/.dropbox-two/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3")
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
getwd()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",destfile="noaa.csv.bz2",cache="curl")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",destfile="noaa.csv.bz2",method="curl")
data <- read.csv(bzfile("noaa.csv.bz2"))
bunzip2("noaa.csv.bz2", "noaa.csv", remove = FALSE)
data <- read.csv("noaa.csv")
library(R.utils)
install.packages("R.utils")
library(R.utils)
bunzip2("noaa.csv.bz2", "noaa.csv", remove = FALSE)
data <- read.csv("noaa.csv")
head(data)
names(data)
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP"")
data.subset <- data[needed.cols]
""
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data["EVTTYPE"]
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data["EVTYPE"]
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data["EVTYPE"]
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
needed.cols <- c("EVTTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
needed.cols
data[needed.cols]
data[c("EVTYPE")]
data[c("EVTYPE","FATALITIES")]
needed.cols <- c("EVTYPE","FATAL","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
a <- 1
remove(a)
needed.cols <- c("EVTYPE","FATALITIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
names(data)
data.subset[,"BGN_DATE"] = as.Date(data.subset[,"BGN_DATE"],format="%m/%d/%Y %H:%M:%S")
data.subset[,"BGN_YEAR"] = format(data.subset[,"BGN_DATE"],"%Y")
needed.cols <- c("BGN_DATE","EVTYPE","FATALITIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
data.subset <- data[needed.cols]
data.subset[,"BGN_DATE"] = as.Date(data.subset[,"BGN_DATE"],format="%m/%d/%Y %H:%M:%S")
data.subset[,"BGN_YEAR"] = format(data.subset[,"BGN_DATE"],"%Y")
setwd("/Users/kindaixin/Dropbox-work/Dropbox/coursera/05 Reproducible Research/PA2")
data.subset[(data.subset[,"PROPDMGEXP"] == "k"),]
data.subset[(data.subset[,"PROPDMGEXPa"] == "k"),]
data.subset[(data.subset[,"PROPDMGEXP"] == "K"),]
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "K"),]
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMBMULTIPLIER <- "3"
data.subset$PROPDMBMULTIPLIER <- data.subset$PROPDMGEXP
unqiue(data.subset$PROPDMBMULTIPLIER)
unique(data.subset$PROPDMBMULTIPLIER)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMBMULTIPLIER <- "3"
unique(data.subset$PROPDMBMULTIPLIER)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMBMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMBMULTIPLIER <- "2"
unique(data.subset$PROPDMBMULTIPLIER)
data.subset$PROPDMBMULTIPLIER <- data.subset$PROPDMGEXP
unique(data.subset$PROPDMBMULTIPLIER)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
unique(data.subset$PROPDMBMULTIPLIER)
NULL * 10
a <- NULL * 10
a
a + 1
unique(data.subset$PROPDMBMULTIPLIER)
data.subset$PROPDMBMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMBMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMBMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMBMULTIPLIER <- "2"
data.subset$PROPDMBMULTIPLIER <- as.numeric(data.subset$PROPDMBMULTIPLIER)
data.subset[(is.numeric(data.subset[,"PROPDMGEXP"]),]$PROPDMBMULTIPLIER <- 0
data.subset[(is.numeric(data.subset[,"PROPDMGEXP"])),]$PROPDMBMULTIPLIER <- 0
data.subset[(is.numeric(data.subset[,"PROPDMGEXP"])),]$PROPDMBMULTIPLIER
unique(data.subset$PROPDMBMULTIPLIER)
data.subset$PROPDMBMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMBMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMBMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMBMULTIPLIER <- "2"
data.subset$PROPDMBMULTIPLIER <- as.numeric(data.subset$PROPDMBMULTIPLIER)
data.subset[(!is.numeric(data.subset[,"PROPDMGEXP"])),]$PROPDMBMULTIPLIER
!is.numeric(data.subset[,"PROPDMGEXP"])
is.numeric(data.subset[,"PROPDMGEXP"])
data.subset[,"PROPDMGEXP"]
data.subset$PROPDMBMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMBMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMBMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMBMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMBMULTIPLIER <- "2"
data.subset$PROPDMBMULTIPLIER <- as.numeric(data.subset$PROPDMBMULTIPLIER)
data.subset[(!is.numeric(data.subset[,"PROPDMBMULTIPLIER "])),]$PROPDMBMULTIPLIER <- 0
data.subset$PROPDMBMULTIPLIER <- NULL
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(!is.numeric(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER
View(data.subset)
dim(is.numeric(data.subset[,"PROPDMGMULTIPLIER"])))
dim(is.numeric(data.subset[,"PROPDMGMULTIPLIER"]))
is.numeric(data.subset[,"PROPDMGMULTIPLIER"])
class(data.subset[,"PROPDMGMULTIPLIER"])
is.numeric(c("1","a"))
is.numeric(c(1,"a"))
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(!is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
unique(data.subset$PROPDMGMULTIPLIER)
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
unique(data.subset$PROPDMGMULTIPLIER)
data$PROPDMGACTUAL <- data$PROPDMG * 10^data$PROPDMGEXP
class(data.subset$PROPDMG)
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGEXP
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGMULTIPLIER
View(data.subset)
convertToActual <- function(){
###1. For property damage
#add a new multiplier column
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
#Get the actual property damage
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGMULTIPLIER
###2. For crop damage
}
convertToActual()
?qplot
??qplot
convertToActual <- function(){
###1. For property damage
#add a new multiplier column
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
#Get the actual property damage
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGMULTIPLIER
###2. For crop damage
#add a new multiplier column
data.subset$CROPDMGMULTIPLIER <- as.character(data.subset$CROPDMGEXP)
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "k"),]$CROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "m"),]$CROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "b"),]$CROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]$CROPDMGMULTIPLIER <- "2"
data.subset$CROPDMGMULTIPLIER <- as.numeric(data.subset$CROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"CROPDMGMULTIPLIER"])),]$CROPDMGMULTIPLIER <- 0
#Get the actual crop damage
data.subset$CROPDMGACTUAL <- data.subset$CROPDMG * 10^data.subset$CROPDMGMULTIPLIER
#Sum both crop and property damages
data.subset$TOTALDMG <- data.subset$CROPDMGACTUAL + data.subset$PROPDMGACTUAL
}
convertToActual()
damages <-aggregate(TOTALDMG ~ EVTYPE,data = data.subset, FUN=SUM, na.rm=TRUE)
convertToActual()
data.subset$TOTALDMG <- data.subset$CROPDMGACTUAL + data.subset$PROPDMGACTUAL
(data.subset$CROPDMGACTUAL + data.subset$PROPDMGACTUAL)
data.subset$CROPDMGACTUAL
View(data.subset)
class(data.subset$PROPDMGACTUAL)
class(data.subset$CROPDMGACTUAL)
###1. For property damage
#add a new multiplier column
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
#Get the actual property damage
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGMULTIPLIER
###2. For crop damage
#add a new multiplier column
data.subset$CROPDMGMULTIPLIER <- as.character(data.subset$CROPDMGEXP)
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "k"),]$CROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "m"),]$CROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "b"),]$CROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]$CROPDMGMULTIPLIER <- "2"
data.subset$CROPDMGMULTIPLIER <- as.numeric(data.subset$CROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"CROPDMGMULTIPLIER"])),]$CROPDMGMULTIPLIER <- 0
#Get the actual crop damage
data.subset$CROPDMGACTUAL <- data.subset$CROPDMG * 10^data.subset$CROPDMGMULTIPLIER
#Sum both crop and property damages
data.subset$TOTALDMG <- data.subset$CROPDMGACTUAL + data.subset$PROPDMGACTUAL
View(data.subset)
data.subset$CROPDMGACTUAL!= data.subset$PROPDMGACTUAL
damages <-aggregate(TOTALDMG ~ EVTYPE,data = data.subset, FUN=SUM, na.rm=TRUE)
damages <-aggregate(TOTALDMG ~ EVTYPE,data = data.subset, FUN="sum", na.rm=TRUE)
fatalities <-aggregate(FATALITIES ~ EVTYPE,data = data.subset, FUN="sum", na.rm=TRUE)
View(damages)
?order
library(xtable)
install.packages("xtable")
library(xtable)
library(xtable)
print.xtable(damages)
?print.xtable
xt <- xtable(damages)
print(xt)
print(xt,type=html)
print(xt,type="html")
?order
order(damages$TOTALDMG,decreasing=true)
order(damages$TOTALDMG,decreasing=TRUE)
damages[order(damages$TOTALDMG,decreasing=TRUE),]
top15fatalities <- damages[order(damages$TOTALDMG,decreasing=TRUE),][1:15]
top15fatalities <- damages[order(damages$TOTALDMG,decreasing=TRUE),][1:15,]
View(top15fatalities)
qplot(TOTALDMG ~ EVTYPE,data=top15fatalities)
library(ggplot)
library(ggplot2)
qplot(TOTALDMG ~ EVTYPE,data=top15fatalities)
qplot(TOTALDMG~EVTYPE,data=top15fatalities)
qplot(TOTALDMG,EVTYPE,data=top15fatalities)
??qplot
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="histogram")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="line")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="bar")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="stat_bin")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="histogram")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="histogram",stat="identity")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="rect")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="bar")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="bar",stat="identity")
qplot(EVTYPE,TOTALDMG,data=top15fatalities,geom="bar",stat="identity")
qplot(TOTALDMG,EVTYPE,data=top15fatalities,geom="bar",stat="identity")
gplot(top15fatalities, aes(x=TOTALDMG, y=EVTYPE)) +
geom_bar(stat='identity') +
coord_flip()
coord_flip()
ggplot(top15fatalities, aes(x=TOTALDMG, y=EVTYPE)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=EVTYPE,y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=EVTYPE,y=order(TOTALDMG))) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=order(EVTYPE),y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=EVTYPE,y=TOTALDMG,order=desc(TOTALDMG))) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=order(EVTYPE),y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()ggplot(top15fatalities, aes(x=EVTYPE,y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=EVTYPE,y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()
top15fatalities
class(top15fatalities$EVTYPE)
top15fatalities$EVTYPE
top15fatalities <- transform(top15fatalities, variable = reorder(TOTALDMG,-value))
top15fatalities <- transform(top15fatalities, variable = reorder(TOTALDMG,-value))
?reorder
?transform
ggplot(top15fatalities, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(top15fatalities, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000)) +
geom_bar(stat='identity') +
coord_flip() + scale_y_continuous(name="Total Damages in USD Millions")
ggplot(top15fatalities, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000000)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of severe weather")
ggplot(top15fatalities, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000000)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
View(top15fatalities)
View(fatalities)
View(top15fatalities)
library(ggplot2)
top15fatalities <- fatalities[order(fatalities$TOTALDMG,decreasing=TRUE),][1:15]
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
library(ggplot2)
top15fatalities <- fatalities[order(fatalities$TOTALDMG,decreasing=TRUE),][1:15]
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
library(ggplot2)
top15fatalities <- fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1:15]
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
fatalities <-aggregate(FATALITIES ~ EVTYPE,data = data.subset, FUN="sum", na.rm=TRUE)
top15fatalities <- fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1:15]
View(fatalities)
top15fatalities <- fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1:15]
fatalities$FATALITIES
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),]
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1:15]
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),]
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1]
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),][1:3]
top15damage <- damages[order(damages$TOTALDMG,decreasing=TRUE),][1:15]
top15fatalities <- damages[order(damages$TOTALDMG,decreasing=TRUE),][1:15]
top15fatalities <- damages[order(damages$TOTALDMG,decreasing=TRUE),][1:15]
order(fatalities$FATALITIES,decreasing=TRUE)
fatalities[order(fatalities$FATALITIES,decreasing=TRUE),]
class(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),])
class(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),])[1]
class(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),])[1:2]
class(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),])
top15fatalities <- head(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),],n=15)
View(top15fatalities)
top15fatalities <- head(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),],n=115)
top15fatalities <- head(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),],n=15)
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
top15fatalities <- head(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),],n=15)
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Fatalities") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Fatalities caused by Severe Weather")
library(ggplot2)
top15fatalities <- head(fatalities[order(fatalities$FATALITIES,decreasing=TRUE),],n=15)
ggplot(top15fatalities, aes(x=reorder(EVTYPE,FATALITIES),y=FATALITIES)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Fatalities") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Fatalities caused by Severe Weather")
View(top15fatalities)
top15damages <- head(damges[order(damages$TOTALDMG,decreasing=TRUE),],n=15)
ggplot(top15damages, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000000)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
top15damages <- head(damges[order(damages$TOTALDMG,decreasing=TRUE),],n=15)
ggplot(top15damages, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000000)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
top15damages <- head(damages[order(damages$TOTALDMG,decreasing=TRUE),],n=15)
ggplot(top15damages, aes(x=reorder(EVTYPE,TOTALDMG),y=TOTALDMG/1000000000)) +
geom_bar(stat='identity') +
coord_flip() +
scale_y_continuous(name="Total Damages in USD Billions") +
scale_x_discrete(name="Type of Severe Weather") +
ggtitle("Total Property and Crop Damages caused by Severe Weather")
View(top15damages)
###1. For property damage
#add a new multiplier column
data.subset$PROPDMGMULTIPLIER <- as.character(data.subset$PROPDMGEXP)
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "k"),]$PROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "b"),]$PROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "h"),]$PROPDMGMULTIPLIER <- "2"
data.subset$PROPDMGMULTIPLIER <- as.numeric(data.subset$PROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"PROPDMGMULTIPLIER"])),]$PROPDMGMULTIPLIER <- 0
#Get the actual property damage
data.subset$PROPDMGACTUAL <- data.subset$PROPDMG * 10^data.subset$PROPDMGMULTIPLIER
###2. For crop damage
#add a new multiplier column
data.subset$CROPDMGMULTIPLIER <- as.character(data.subset$CROPDMGEXP)
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "k"),]$CROPDMGMULTIPLIER <- "3"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "m"),]$CROPDMGMULTIPLIER <- "6"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "b"),]$CROPDMGMULTIPLIER <- "9"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]$CROPDMGMULTIPLIER <- "2"
data.subset$CROPDMGMULTIPLIER <- as.numeric(data.subset$CROPDMGMULTIPLIER)
data.subset[(is.na(data.subset[,"CROPDMGMULTIPLIER"])),]$CROPDMGMULTIPLIER <- 0
#Get the actual crop damage
data.subset$CROPDMGACTUAL <- data.subset$CROPDMG * 10^data.subset$CROPDMGMULTIPLIER
#Sum both crop and property damages
data.subset$TOTALDMG <- data.subset$CROPDMGACTUAL + data.subset$PROPDMGACTUAL
data.subset[(tolower(data.subset[,"PROPDMGEXP"]) == "m"),]$PROPDMGMULTIPLIER <- "6"
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]$CROPDMGMULTIPLIER <- "2"
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]$CROPDMGMULTIPLIER
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "b"),]
data.subset[(tolower(data.subset[,"CROPDMGEXP"]) == "h"),]
unique(data.subset$CROPDMGEXP)
